package com.betterfly.test.ui.home.adapter.LoadMoreimport androidx.recyclerview.widget.GridLayoutManagerimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewabstract class RecyclerViewItemsScrollListener : RecyclerView.OnScrollListener() {    private var mScrollThreshold = 20    internal var firstVisibleItem: Int = 0    internal var visibleItemCount: Int = 0    internal var totalItemCount: Int = 0    // The minimum amount of items to have below your current scroll position    // before loading more.    private var visibleThreshold = 13    // The current offset index of data you have loaded    private var currentPage = 0    // The total number of items in the dataset after the last load    private var previousTotalItemCount = 0    // True if we are still waiting for the last set of data to load.    private var loading = true    // Sets the starting page index    private val startingPageIndex = 0    private var infiniteScrollingEnabled = true    private val controlsVisible = true    override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {        super.onScrolled(recyclerView, dx, dy)        var lastVisibleItemPosition = 0        val manager = recyclerView.layoutManager        visibleItemCount = recyclerView.childCount        if (manager is GridLayoutManager) {            val gridLayoutManager = manager as GridLayoutManager?            lastVisibleItemPosition = gridLayoutManager!!.findFirstVisibleItemPosition()            totalItemCount = gridLayoutManager.itemCount        } else if (manager is LinearLayoutManager) {            val linearLayoutManager = manager as LinearLayoutManager?            lastVisibleItemPosition = linearLayoutManager!!.findFirstVisibleItemPosition()            totalItemCount = linearLayoutManager.itemCount        }         if (totalItemCount < previousTotalItemCount) {            this.currentPage = this.startingPageIndex            this.previousTotalItemCount = totalItemCount            if (totalItemCount == 0) {                this.loading = true            }        }         if (loading && totalItemCount > previousTotalItemCount) {            loading = false            previousTotalItemCount = totalItemCount        }       if (!loading && (lastVisibleItemPosition + visibleThreshold > totalItemCount) && (totalItemCount > visibleThreshold)) {            onLoadMore()            loading = true        }    }    abstract fun onScrollUp()    abstract fun onScrollDown()    abstract fun onLoadMore()    fun setScrollThreshold(scrollThreshold: Int) {        mScrollThreshold = scrollThreshold    }    fun stopInfiniteScrolling() {        infiniteScrollingEnabled = false    }    fun reset() {        previousTotalItemCount = 0        currentPage = 1    }    fun onDataCleared() {        //  previousTotalItemCount = 0;        loading = false        currentPage = 1    }    fun setvisibleThreshold_less(visibleThreshold_: Int) {        visibleThreshold = visibleThreshold - visibleThreshold_    }    fun resetvisibleThreshold_less() {        visibleThreshold = 10    }}