package com.betterfly.test.ui.home.adapterimport android.text.TextUtilsimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.ImageViewimport android.widget.RelativeLayoutimport android.widget.TextViewimport androidx.recyclerview.widget.RecyclerViewimport com.betterfly.test.ui.model.Itemimport com.betterfly.test.Rimport com.betterfly.test.data.FilterableSectionimport com.betterfly.test.ui.home.adapter.LoadMore.LoaderViewHolderimport com.bumptech.glide.Glideimport java.util.*///Adaptador de la vista Home con la información de cada personaje, cuenta con un scroll infinito// y la función que permite realizar filtros.class ItemAdapterRecycler(_data: ArrayList<Item>,                          var clickDelegate: OnItemClickListenerItemAdapterRecycler) : RecyclerView.Adapter<RecyclerView.ViewHolder>(), FilterableSection {    var clickDelegateFinal: OnItemClickListenerItemAdapterRecycler    private val VIEWTYPE_ITEM = 1    private val VIEWTYPE_LOADER = 2    private var showLoader: Boolean = false    private var showNot_net = false    override fun getItemCount(): Int {        return if (data_filtered == null || data_filtered!!.size == 0) {            0        } else data_filtered!!.size + 1    }    override fun getItemViewType(position: Int): Int {        return if (position != 0 && position == itemCount - 1) {            VIEWTYPE_LOADER        } else {            VIEWTYPE_ITEM        }    }    var data: ArrayList<Item>? = null        private set    var data_filtered: ArrayList<Item>? = null        private set    init {        clickDelegateFinal = clickDelegate        data_filtered = ArrayList(_data)        data = ArrayList(_data)    }    /// función para mostrar la vista loader en el footer    fun showLoading(status: Boolean) {        showLoader = status    }    /// función para en el caso que no tenga internet    fun showNotNet(status: Boolean) {        showNot_net = status    }    ///  función para  agregar mas items al final del footer    fun add_more(data:ArrayList<Item> ) {        this.data_filtered!!.addAll(data)    }    ///Función Para actualizar el listener en caso de cambios de contexto    fun update_clickDelegate(clickDelegateFinal: OnItemClickListenerItemAdapterRecycler) {        this.clickDelegateFinal = clickDelegateFinal    }    ///Función Para actualizar una posición  de la lista posterior al cambio dentro del objeto    fun updated(position: Int) {        try {            if (data_filtered!!.size > 0) {                notifyItemChanged(position)            } else {                notifyDataSetChanged()            }        } catch (e: IndexOutOfBoundsException) {            e.printStackTrace()            notifyDataSetChanged()        }    }///Función para borrar item    fun delete(position: Int){        val dataDelete = data_filtered!![position]        data_filtered?.removeAt(position)          for (i in 0 until this.data?.size!!) {            if(this.data!![i].id == dataDelete.id){                data?.removeAt(i)                break            }        }    }    ///Función para cargar toda la información    fun loadData(dataLoad: ArrayList<Item>){        data = dataLoad        data_filtered = dataLoad    }    override fun getItemId(position: Int): Long {        return position.toLong()    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {        if (viewType == VIEWTYPE_LOADER) {            val view = LayoutInflater.from(parent.context).inflate(R.layout.loader_item_layout, parent, false)            return LoaderViewHolder(view)        } else {            val view =                LayoutInflater.from(parent.context).inflate(R.layout.list_row_item, parent, false)            return ItemViewHolder(view)        }    }    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {        if (holder is ItemViewHolder) {            val datalocal = data_filtered!![position]            holder.nombre.setText(datalocal.name)            holder.textViewStatus.setText(datalocal.status)            holder.loadStatus(datalocal.status)            holder.loadAvatar(datalocal.image)            holder.location.setText(datalocal.location.name)            holder.linearlayout_list.setOnClickListener { view ->                clickDelegateFinal.OnClick(datalocal,position,view.context)            }            holder.linearlayout_list.setOnLongClickListener { view ->                clickDelegateFinal.LongClick(datalocal,position,view.context)                false            }        } else if (holder is LoaderViewHolder) {            if (showLoader) {                holder.mProgressBar.visibility = View.VISIBLE            } else {                if (showNot_net) {                    holder.mProgressBar.visibility = View.INVISIBLE                } else {                    holder.mProgressBar.visibility = View.GONE                }            }            return        }    }    inner class ItemViewHolder( var  v: View) : RecyclerView.ViewHolder(v) {        val location:TextView        val fecha: TextView        val textViewStatus: TextView        val imageViewStatus:ImageView        var linearlayout_list: RelativeLayout        var imageViewAvatar:ImageView        val nombre: TextView        init {            fecha  = v.findViewById(R.id.fecha)            nombre = v.findViewById(R.id.nombre)            textViewStatus = v.findViewById(R.id.textViewStatus)            location = v.findViewById(R.id.location)            linearlayout_list = v.findViewById(R.id.linearlayout_list_song)            imageViewAvatar = v.findViewById(R.id.imageViewAvatar)            imageViewStatus = v.findViewById(R.id.imageViewStatus)        }        fun loadStatus(status:String){            when (status) {                "Alive" -> {print("Alive")                    Glide.with(v.context)                        .load(R.drawable.ic_dot_green)                        .into(imageViewStatus)                }                "Dead" -> {                    print("Dead")                    Glide.with(v.context)                        .load(R.drawable.ic_dot_red)                        .into(imageViewStatus);                }                else -> { // Note the block                    print("unknown")                    Glide.with(v.context)                        .load(R.drawable.ic_dot_grey)                        .into(imageViewStatus);                }            }        }        fun loadAvatar(urlAvatar:String){            Glide.with(v.context)                .load(urlAvatar) // image url                .placeholder(R.drawable.not_avatar) // any placeholder to load at start                .error(R.drawable.not_avatar)  // any image in case of error                .override(200, 200) // resizing                .centerCrop()                .into(imageViewAvatar);        }    }    ///Función filtrar items por nombre    override fun filter(query: String) {        if (TextUtils.isEmpty(query)) {            data_filtered = ArrayList(data!!)        } else {            data_filtered!!.clear()            name@ for (value in data!!) {                if (value.name.lowercase(Locale.getDefault())                        .contains(query.lowercase(Locale.getDefault()))) {                    data_filtered!!.add(value)                }            }        }    }}